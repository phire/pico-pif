.program process
; pif_clk: PIN_20, pif_in: PIN_18, pif_out: PIN_19

.wrap_target
; Start PIO by sending a command.
; Valid commands:
;  0x8000_000b - Skip tx, jump straight to command rx
;  0x0020_000b - Send 32bits of data, then queue up command rx
;  0x0200_000b - Send 512bits of data, then queue up command rx
;  0x0000_0020 - send 0 bit "ready" packet, then receivs 32 bits of data
;  0x0000_0200 - send 0 bit "ready" packet, then receivs 512 bits of data
;
    out y, 16 ; load next in_count (11, 31 or 511)
    out x, 15 [10] ; load bit count, will be 0, 32, or 512. Leave a single zero bit in OSR as our start bit
    wait 1 gpio 20 ;
tx_loop:
    wait 0 gpio 20 ; wait for falling edge of clock
    out pins, 1 [3]
    jmp x--, tx_loop

; Return tx pin to high
    wait 0 gpio 20 ; wait for falling edge of clock
    set pins, 1

rx:
    wait 0 pin 0 [3] ;  wait for start bit
    irq 0 ; give interrupt handler early warning of incomming data
rx_loop:
    wait 0 gpio 20 ; wait for falling edge of clock
    in pins, 1 [3]
    jmp y--, rx_loop
    push ; push any remaining bits

    ; We only have about 7 clock cycles to process the data
.wrap

.program counter
.wrap_target
count:
    wait 0 gpio 20
    jmp x--, next
next:
    wait 1 gpio 20
    jmp count
.wrap
